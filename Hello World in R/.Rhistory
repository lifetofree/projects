df1 <- read_csv("student_01.csv")
## read file into R
df1 <- read_csv("student_01.csv")
print(df1)
df2 <- read_csv("student_02.csv")
print(df1)
print(df2)
df2 <- read_csv2("student_02.csv")
print(df2)
df3 <- read_delim("student_03.txt", delim = "|") ## split with set delimiter
print(df3)
df4 <- read_tsv("student_04.tsv") ## split with tab
print(df4)
install.packages("readxl")
install.packages("jsonlite")
## how to read json file to R
df6 <- fromJSON("my_profile.json")
print(df6)
library(jsonlite)
## how to read json file to R
df6 <- fromJSON("my_profile.json")
print(df6)
## how to read json file to R
my_profile <- fromJSON("my_profile.json")
print(my_profile)
View(df6)
## call library
library(tidyverse)
library(glue)
library(RSQLite)
library(readxl)
library(jsonlite)
## read file into R
df1 <- read_csv("student_01.csv") ## split with comma
print(df1)
df2 <- read_csv2("student_02.csv") ## split with semicolon
print(df2)
df3 <- read_delim("student_03.txt", delim = "|") ## split with set delimiter
print(df3)
df4 <- read_tsv("student_04.tsv") ## split with tab
print(df4)
## read excel file, sheet1
df5 <- read_excel("student_05.xlsx", sheet = 1) ## or read_excel("student_05.xlsx", sheet = "Sheet1")
print(df5)
## list files
## list.files(pattern = "*.json")
## how to read json file to R
my_profile <- fromJSON("my_profile.json")
print(my_profile)
temp <- fromJSON("example.json")
temp <- fromJSON("example_df.json")
## read json file as data frame
temp <- fromJSON("example_df.json")
print(temp)
library(dplyr)
head(mtcars)
tail(mtcars)
mtcars
colnames(mtcars)
rownames(mtcars)
head(mtcars, 10)
print(car_names)
car_names <- rownames(mtcars)
print(car_names)
mtcars$model <- car_names
mtcars$model <- car_names
print(car_names)
rownames(mtcars)
mtcars$model <- car_names
mtcars
## delete columns
rowname(mtcars) <- NULL
## delete columns
rownames(mtcars) <- NULL
mtcars
## delete columns
rownames(mtcars) <- NULL
mtcars
mtcars
## delete columns
rownames(mtcars) <- NULL
mtcars
## how to select column
select(mtcars, hp, wt, am)
select(mtcars, 1:5, 10) ## select([df],[position]) => select from mtcars, column 1 to 5 amd column 10
select(mtcars, am, hp, 10)
select(mtcars, contains("a"))
select(mtcars, contains("a"))
dbDisconnect(con)
## data transformation pipeline
mtcars %>%
select(hp, wt, am)
## data transformation pipeline => can get result to next parameter
mtcars %>%
select( hp, wt, am ) %>%
filter( hp >= 200 )
## data transformation pipeline => can get result to next parameter, flow top to bottom
mtcars %>%
select( modil, hp, wt, am ) %>%
filter( hp >= 200 )
## data transformation pipeline => can get result to next parameter, flow top to bottom
mtcars %>%
select( model, hp, wt, am ) %>%
filter( hp >= 200 )
## native pipe in R
mtcars |>
select( model, hp, wt, am ) |>
filter( hp >= 200 )
"hi" |> print()
"hi" %>% print()
## more 1 conditions
mtcars |>
select( model, hp, wt, am ) |>
filter( hp >= 200 & wt < 5 & am == 1 )
mtcars |>
select( model, hp, wt, am ) |>
filter( hp >= 200 | hp <= 90 )
dbDisconnect(con)
## between
mtcars |>
select( model, hp, wt, am ) |>
filter( between ( hp, 100, 180 ) )
## car contains
grepl("^M.+", car_names)
car_names
grep("^M.+", car_names) ## return with index
car_names
mtcars |>
select( model, hp, wt, am ) |>
filter( grepl("^M.+", car_names) )
mtcars |>
select( model, hp, wt, am ) |>
filter( grepl("^M.+", car_names) & hp >= 180 )
## arrange
mtcars |>
select( model, hp, wt, am ) |>
filter( grepl("^M.+", car_names) ) |>
arrange( hp )
mtcars |>
select( model, hp, wt, am ) |>
filter( grepl("^M.+", car_names) ) |>
arrange( am )
mtcars |>
select( model, hp, wt, am ) |>
filter( grepl("^M.+", car_names) ) |>
arrange( am, desc( hp ) )
m_cars <- mtcars |>
select( model, hp, wt, am ) |>
filter( grepl("^M.+", car_names) ) |>
arrange( am, desc( hp ) )
View(m_cars)
## mutate
## select and filter can be switch order
mtcars |>
filter ( hp < 100 ) |>
select(model, am, hp)
## mutate
## select and filter can be switch order
mtcars |>
filter ( hp < 100 ) |>
select( model, am, hp ) |>
mutate ( am_label = ifelse ( am == 0, "Auto", "Manual"  ) )
mtcars |>
filter ( hp < 100 ) |>
select( model, am, hp ) |>
mutate ( am_label = ifelse ( am == 0, "Auto", "Manual"  ),
hp_scale = hp/100 )
hp_df <- mtcars |>
filter ( hp < 100 ) |>
select( model, am, hp ) |>
mutate ( am_label = ifelse ( am == 0, "Auto", "Manual"  ),
hp_scale = hp / 100,
hp_double = hp * 2)
View(hp_df)
## summerise
## library sqldf => write sql state in R => didn't use
mtcars |>
summarise(mean_hp = mean ( hp ),
sum_hp =. sum (hp ))
## summerise
## library sqldf => write sql state in R => didn't use
mtcars |>
summarise(mean_hp = mean ( hp ),
sum_hp = sum (hp ))
## summerise
## library sqldf => write sql state in R => didn't use
mtcars |>
summarise(mean_hp = mean ( hp ),
sum_hp = sum ( hp ),
median_hp = median ( hp ),
sd_hp = sd ( hp ),
n = n () )
mtcars |>
filter ( wt <= 5 ) |>
summarise(mean_hp = mean ( hp ),
sum_hp = sum ( hp ),
median_hp = median ( hp ),
sd_hp = sd ( hp ),
n = n () )
filter ( wt <= 5 ) |>
summarise(mean_hp = mean ( hp ),
sum_hp = sum ( hp ),
median_hp = median ( hp ),
sd_hp = sd ( hp ),
n = n () )
filter ( wt <= 5 ) |>
summarise(mean_hp = mean ( hp ),
sum_hp = sum ( hp ),
median_hp = median ( hp ),
sd_hp = sd ( hp ),
n = n () )
mtcars |>
filter ( wt <= 5 ) |>
summarise(mean_hp = mean ( hp ),
sum_hp = sum ( hp ),
median_hp = median ( hp ),
sd_hp = sd ( hp ),
n = n () )
data("mtcars")
library(jsonlite)
## call library
library(tidyverse)
library(dplyr)
library(glue)
library(RSQLite)
library(readxl)
library(jsonlite)
## dplyr ( part of tinyverse)
## select(),filter(), arrange(), mutate(), summerise()
mtcars |>
select(am, hp, gt) |>
filter(am == 0)
## dplyr ( part of tinyverse)
## select(),filter(), arrange(), mutate(), summerise()
mtcars |>
select(am, hp, wt) |>
filter(am == 0)
df <- tibble(mtcars)
df
## snadom sample
df |
sample_n(3)
## snadom sample
df |>
sample_n(3)
## snadom sample
df |>
sample_n(3)
df |>
sample_frac(0.2)
df |>
sample_frac(0.2)
## dplyr ( part of tinyverse)
## select(),filter(), arrange(), mutate(), summerise()
df <- mtcars |>
rownames_to_column(var = "model") |>
tibble()
df |>
sample_n(3)
set.seed(42)
df |>
sample_n(3)
set.seed(42)
df |>
sample_n(3)
df |>
sample_n(3)
df |>
sample_frac(0.2)
df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
count( am )
df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
count( am ) |>
mutate ( pct = n / sum( n ))
df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
count( am_text ) |>
mutate ( pct = n / sum( n ))
df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
distinct( am_text )
df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
distinct( model )
model_name <- df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
distinct( model ) |>
pull() ## change to vector
model_names <- df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
distinct( model ) |>
pull() ## change to vector
model_names
grep( "Mazda.+", model_names )
grepl( "Mazda.+", model_names )
data()
brand_members
band_members
band_instruments
## join tables
## sql joins
## inner, left, right, full
inner_join(band_members, band_instruments, by = "names")
band_members |>
inner_join(band_instruments, by = "names")
band_members |>
right_join(band_instruments, by = "name")
band_members |>
left_join(band_instruments, by = "name")
## full outer join
band_members |>
full_join(band_instruments, by = "name")
## replace na
band_members |>
full_join(band_instruments, by = "name") |>
replace_na( "no data")
## replace na
band_members |>
full_join(band_instruments, by = "name") |>
mutate(plays = replace_na( plays = "drum"))
## replace na
band_members |>
full_join(band_instruments, by = "name") |>
mutate(plays = replace_na( plays, "drum"))
## replace na
band_members |>
full_join(band_instruments, by = "name") |>
mutate(plays = replace_na( plays, "drum"),
band = replace_na( band, "Aerosmith"))
bind_rows(df1, df2)
## union data
df1 <- data.frame( id = 1:3,
name = c("toy", "john", "mary"))
df2 <- data.frame( id = 3:5,
name = c("mary", "anna", "devid"))
bind_rows(df1, df2)
df1 |>
bind_rows(df1, df2) |>
distinct("name")
df1 |>
bind_rows(df1, df2) |>
distinct(name)
## join in case
df3 <- data.frame( id = 1:3,
name = c("toy", "john", "mary"))
df4 <- data.frame( id = 3:5,
friend = c("mary", "anna", "devid"))
df3 <-
rename (friend = name) |>
left_join(df4, by = c("friend" = "name"))
df3 <-
rename (friend = name) |>
left_join(df4, by = c("friend" = "name"))
df3 <- df3 |>
rename (friend = name) |>
left_join(df4, by = c("friend" = "name"))
## call library
library(tidyverse)
## dplyr +  gg plot
library(dplyr)
library(glue)
library(RSQLite)
library(readxl)
library(jsonlite)
## data transformation 101
## 1. select columns => SQL select
## 2. filter rows => SQL where
## 3. arrange => SQL order by
## 4. mutate (create now columns)
## 5. summerise => SQL aggregrate function
## other functions: count, distiinct
## join tables, bind_row, bind_col
## dplyr ( part of tinyverse)
## select(),filter(), arrange(), mutate(), summerise()
df <- mtcars |>
rownames_to_column(var = "model") |>
tibble()
df <- tibble(mtcars)
df
## snadom sample / sampling
set.seed(42) ## for lock result when use sample
df |>
sample_n(3)
df |>
sample_frac(0.2)
df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
count( am_text ) |>
mutate ( pct = n / sum( n ))
## join in case
df3 <- data.frame( id = 1:3,
friend = c("toy", "john", "mary"))
df4 <- data.frame( id = 3:5,
name = c("mary", "anna", "devid"))
df3 <- df3 |>
rename (friend = name) |>
left_join(df4, by = c("friend" = "name"))
df3 <- df3 |>
# rename (friend = name) |>
left_join(df4, by = c("friend" = "name"))
df3
df3 <- df3 |>
rename (friend = name)
## join in case
df3 <- data.frame( id = 1:3,
friend = c("toy", "john", "mary"))
df3 <- df3 |>
rename (friend = name)
## call library
library(tidyverse)
## dplyr +  gg plot
library(dplyr)
library(glue)
library(RSQLite)
library(readxl)
library(jsonlite)
## data transformation 101
## 1. select columns => SQL select
## 2. filter rows => SQL where
## 3. arrange => SQL order by
## 4. mutate (create now columns)
## 5. summerise => SQL aggregrate function
## other functions: count, distiinct
## join tables, bind_row, bind_col
## dplyr ( part of tinyverse)
## select(),filter(), arrange(), mutate(), summerise()
df <- mtcars |>
rownames_to_column(var = "model") |>
tibble()
df <- tibble(mtcars)
df
## snadom sample / sampling
set.seed(42) ## for lock result when use sample
df |>
sample_n(3)
df |>
sample_frac(0.2)
df |>
select ( model, am ) |>
mutate ( am_text = ifelse(am == 0, "Auto", "Manual") ) |>
count( am_text ) |>
mutate ( pct = n / sum( n ))
## bind rows and then remove duplicates
df1 |>
bind_rows(df2) |>
bind_rows(df3) |>
bind_rows(df4) |>
distinct()
## union data
df1 <- data.frame( id = 1:3,
name = c("toy", "john", "mary"))
df2 <- data.frame( id = 3:5,
name = c("mary", "anna", "devid"))
## join in case
df3 <- data.frame(id=6:8,
name=c("a","b","c"))
df4 <- data.frame(id=9:10,
name=c("d","e"))
## bind rows and then remove duplicates
df1 |>
bind_rows(df2) |>
bind_rows(df3) |>
bind_rows(df4) |>
distinct()
## shortcut when we have multiple dataframes
list_df <- list(df1, df2, df3, df4)
list_df |>
bind_rows() |>
distinct()
## join in case key names are not the same
band_members |>
rename(friend = name) |>
left_join(band_instruments, by=c("friend"="name") )
qplot(mpg, data = mtcars, geom = "histogram", bins = 10)
## scatter plot
qplot(x=hp, y=mpg, data=mtcars, geom="point")
## ggplot ของแทร่
ggplot(data = mtcars,
aes(x = hp, y = mpg)) +
geom_point(col="red") +
geom_smooth(se=F) +
theme_minimal()
## call library
library(tidyverse) ## ggplot2
## dplyr +  gg plot
library(dplyr)
install.packages("nycflights13")
## use nycfilghts13 -> airline information
library(nycflights13)
flights
write_csv("flights.csv")
write.csv(flights, "flights.csv")
df <- read_csv("flights.csv")
df |>
select (1:5) |>
filter (month == 9)
df |>
count (carrier) |>
arrange(-n) |>
head(5) |>
left_join(airlines)
?flights
